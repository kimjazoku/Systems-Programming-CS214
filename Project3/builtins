#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>

#define DEBUG 1
#define BUFSIZE 100
#define MAXWORD 45

char *builtIns[] = {"cd", "pwd", "which", "exit", "die"};

typedef struct Token
{
    char *str;
    struct Token *next;
} Token;

//pass in front->next
int cd(Token *args) {

    if(args == NULL) {
        errno = EINVAL;
        perror("0 arguments given");
        return -1;
    }
    if(args->next) {
        errno = EINVAL;
        printf("Too many arguments given");
        return -1;
    }

    int status = chdir(args->str);
    if(status == -1) {
        perror("Cannot change current directory");
        return -1;
    }

    return 0;

}

int pwd(Token *args) {

    if(args != NULL) {
        printf("Invalid number of args");
        return -1;
    }
    char buf[BUFSIZE];
    getcwd(buf, BUFSIZE);
    printf("%s\n", buf);

    return 0;
}

int execute(Token *ptr) {

    char call[128] = ".";

    while(ptr != NULL) {
        strcat(call, ptr->str);
        strcat(call, " ");
        ptr = ptr->next;
    }

    int exitStatus = system(call);
    if(exitStatus != 0) {
        errno = exitStatus;
        perror("error running program");
        return -1;
    }

    return 0;
    
}

/* int which(Token *arg) {
    
    if(arg == NULL) {
        errno = EINVAL;
        perror("0 arguents given");
        return -1;
    }
    if (arg->next != NULL) {
        errno = EINVAL;
        perror("Too many arguments given");
        return -1;
    }

    for(int i = 0; i < sizeof(builtIns); i++) {
        if(strcmp(arg, builtIns[i]) == 0) {
            printf("Error: cannot use the name of a built-in argument (%s)\n", arg->str);
            return -1;
        }
    }
    
    
} */


int main() {

    Token *command = (Token*) malloc(sizeof(Token));
    command->str = "";
    command->next = NULL;

    if(DEBUG) {
        command->str = "cd";

        Token arg;
        arg.str = "hey";
        command->next = &arg;
    
        arg.next = NULL;
    }


    if(strcmp(command->str, "cd") == 0) {
        cd(command->next);
    }

    if(DEBUG) {
        command->str = "pwd";
        command->next = NULL;    
    }


    if(strcmp(command->str, "pwd") == 0) {
        pwd(command->next);
    }


    if(DEBUG) {
        command->str = "/test";
        Token arg1, arg2, arg3;

        command->next = &arg1;

        arg1.str = "arg1";
        arg1.next = &arg2;
    
        arg2.str = "arg2";
        arg2.next = &arg3;
    
        arg3.str = "arg3";
        arg3.next = NULL;
    }


    if(command->str[0] == '/') {
        execute(command);
    }

    if(DEBUG) {
        command->str = "which";
        
        Token arg;
        arg.str = "/test";
        arg.next = NULL;

        command->next = &arg;
    }

   /* if(strcmp(command->str, "which") == 0) {
        which(command->next);
    } */



    return 0;
}
